<script>
import Input from '../../mixins/input';



export default {
  name: 'vn@-text-field',

  mixins: [Input],

  props: {
    autofocus: Boolean,

    rows: {
      default: 5,
    },

    type: {
      type: String,
      default: 'text',
    },

    counter: [Boolean, Number, String],
    prefix: String,
    suffix: String,
    // sm: Boolean,
    // md: Boolean,

    suggest: {
      type: Array,
      default: () => [],
    },
  },


  data() {
    return {
      initialValue: null,
      suggestIndex: null,
    }
  },

  computed: {
    classes() {
      return {
        [this.$options.name]: true,

        'vc@field'           : true,
        'vc@field--suffix'   : this.suffix,
        'vc@field--prefix'   : this.prefix,
        'vc@field--focused'  : this.focused,
        'vc@field--suggested': this.suggested,
        // 'vc@field--sm': this.sm,
        // 'vc@field--lg': this.lg,
      }
    },

    isMultiLine() { return this.type === 'textarea' },
    isShowSuggest() { return this.isFocused && this.suggests.length },

    inputClasses() {
      return {
        'vc@field--input': true,
      }
    },

    inputValue: {
      get() {
        return this.lazyValue;
      },

      set(val) {
        this.lazyValue = val;
        this.$emit('input', val);
      }
    },

    count() {
      const inputLength = this.lazyValue ? this.lazyValue.toString().length : 0;
      return `${inputLength} / ${this.counterLength}`;
    },

    counterLength() {
      const parsedLength = parseInt(this.counter, 10)
      return isNaN(parsedLength) ? 25 : parsedLength;
    },

    suggests() {
      let myInput = this.inputValue;
      if (typeof myInput === 'string') {
        myInput = myInput.trim();
      } else {
        myInput = '';
      }

      const re = new RegExp(myInput);

      return this.suggest.filter(suggest => {
        return re.test(suggest);
      });
    },

    suggestSelected() {
      return this.suggests[this.suggestIndex];
    },
  },


  watch: {
    suggests() {
      this.suggestIndex = null;
    },

    isShowSuggest() {
      this.suggestIndex = null;
    },

    isFocused(val) {
      if (val) {
        this.initialValue = this.lazyValue;
      } else if (this.initialValue !== this.lazyValue) {
        this.$emit('change', this.lazyValue);
      }
    },

    value(val) {
      this.lazyValue = val;
    },

    lazyValue(val) {
      !this.validateOnBlur && this.validate();
      // this.shouldAutoGrow && this.calculateInputHeight()
    },
  },

  methods: {
    shiftSuggest(amount) {
      let newIndex = 0;
      if (this.suggestIndex === null) {
        if (amount === -1) {
          newIndex = this.suggests.length + amount;
        } else {
          newIndex = amount - 1;
        }
      } else {
        newIndex = this.suggestIndex + amount;
        if (newIndex >= this.suggests.length) {
          newIndex = null;
        } else if (newIndex < 0) {
          newIndex = null;
        }
      }
      this.suggestIndex = newIndex;
    },

    settleSuggest(suggest) {
      this.inputValue = suggest || this.inputValue;
      this.suggestIndex = null;
      this.blur();
      this.$emit('suggest', suggest);
    },

    onInput(e) {
      this.suggestIndex = null;
      this.inputValue = e.target.value;
    },

    onClickLabel(e) {
      return this.focus();
    },

    blur(e) {
      if (
        e
        && typeof e === 'object'
        && e.relatedTarget
        && e.relatedTarget.dataset
        && e.relatedTarget.dataset.suggestIndex !== undefined
      ) {
        this.settleSuggest(this.suggests[parseInt(e.relatedTarget.dataset.suggestIndex, 10)]);
      } else if (this.suggestIndex !== null) {
        this.settleSuggest(this.suggests[this.suggestIndex]);
      }

      if (document.activeElement === this.$refs.input) {
        this.$refs.input.blur();
      }

      this.isFocused = false;

      this.$nextTick(() => {
        this.validate();
      });

      this.$emit('blur', e);
    },

    focus(e) {
      this.isFocused = true;
      if (document.activeElement !== this.$refs.input) {
        this.$refs.input.focus();
      }
      this.$emit('focus', e);
    },

    genCounter() {
      return this.$createElement('div', {
        'class': {
          'vc@text-field__counter': true,
          'vc@text-field__counter--error': this.hasError,
          // [`${this.$options.name}__counter`]: true,
          // [`${this.$options.name}__counter--error`]: this.hasError,
        }
      }, this.count)
    },

    genFix(type) {
      return this.$createElement('span', {
        class: `vc@field__${type}`,
      }, this[type])
    },

    genSuggest() {
      const $suggest = this.$createElement('transition', {
        attrs: {
          name: 'vc@transition-slide-y',
        }
      }, [this.isShowSuggest ? this.$createElement('div', {
        class: `vc@text-field__suggest`,
      }, this.suggests.map((suggest, index) => {
        return this.$createElement('button', {
          class: {
            'vc@text-field__suggest-item': true,
            'vc@text-field__suggest-item--focused': index === this.suggestIndex,
          },
          attrs: {
            'data-suggest-index': index,
          },
          key: suggest,
        }, [suggest])
      })) : this._e()]);

      return $suggest;
    },

    genInput() {
      const nodeTag   = this.isMultiLine ? 'textarea' : 'input';
      const listeners = Object.assign({}, this.$listeners);

      delete listeners['change']; // Change should not be bound externally

      const nodeOptions = {
        class: {
          'vc@field__node': true,
        },
        domProps: {
          autofocus: this.autofocus,
          disabled : this.disabled,
          required : this.required,
          value    : this.suggestSelected || this.lazyValue,
        },
        attrs: {
          ...this.$attrs,
          name    : this.name,
          readonly: this.readonly,
          tabindex: this.tabindex,
          'aria-label': (!this.$attrs || !this.$attrs.id) && this.label, // Label `for` will be set if we have an id
        },
        on: Object.assign({}, listeners, {
          blur: this.blur,
          input: this.onInput,
          focus: this.focus,
          keydown: e => {
            if (this.isShowSuggest) {
              if (e.which === 13) {
                this.settleSuggest(this.suggestSelected);
              } else if (e.which === 38) {
                this.shiftSuggest(-1);
                e.preventDefault();
              } else if (e.which === 9 || e.which === 40) {
                this.shiftSuggest(1);
                e.preventDefault();
              }
            }
          },
        }),
        ref: 'input',
      };

      if (this.isMultiLine) {
        nodeOptions.domProps.rows = this.rows;
      } else {
        nodeOptions.domProps.type = this.type;
      }

      if (this.placeholder) {
        nodeOptions.domProps.placeholder = this.placeholder;
      }

      const children = [this.$createElement(nodeTag, nodeOptions)];

      this.prefix && children.unshift(this.genFix('prefix'));
      this.suffix && children.push(this.genFix('suffix'));

      return children;
    },
  },

  render(h) {
    return this.genInputGroup(this.genInput(), {attrs: {tabindex: false}});
  },
}
</script>